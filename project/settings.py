"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv
from datetime import timedelta
from pathlib import Path
import os, sys

# Загружаем .env файл
load_dotenv()

def get_env_variable(var_name, default=None):
    """Получить значение переменной окружения или вернуть default, если она отсутствует"""
    value = os.getenv(var_name, default)
    if value is None:
        raise ImproperlyConfigured(f"Переменная окружения {var_name} не задана.")
    return value

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

PROJECT_ROOT = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(PROJECT_ROOT, 'apps'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

ALLOWED_HOST_1 = os.getenv('ALLOWED_HOST_1')
ALLOWED_HOST_2 = os.getenv('ALLOWED_HOST_2')
ALLOWED_HOST = os.getenv('ALLOWED_HOST')
ALLOWED_FRONT = os.getenv('ALLOWED_FRONT')

ALLOWED_HOSTS = [ALLOWED_HOST_1, ALLOWED_HOST_2, ALLOWED_HOST]

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    'project',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.api.apps.ApiConfig',
    'apps.mail.apps.MailConfig',
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Время жизни access-токена
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Время жизни refresh-токена
    'ROTATE_REFRESH_TOKENS': False,                 # Не обновлять refresh-токен при каждом запросе
    'BLACKLIST_AFTER_ROTATION': True,               # Аннулировать старый refresh-токен при обновлении
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',


]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASE_NAME = os.getenv('DATABASE_NAME', 'djangopostsgen')
DATABASE_USER = os.getenv('DATABASE_USER', 'djangopguser')
DATABASE_PASS = os.getenv('DATABASE_PASS', 'changeme!')
DATABASE_HOST = os.getenv('DATABASE_HOST', '127.0.0.1')
DATABASE_PORT = os.getenv('DATABASE_PORT', '5432')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASS,
        'HOST': DATABASE_HOST,
        'PORT': DATABASE_PORT
    }
}

# Читаем USE_MAIL из .env
USE_MAIL = os.getenv('USE_MAIL', 'False').lower() in ['true', '1', 'yes']


if USE_MAIL:
    # Если USE_MAIL=True, настраиваем SMTP
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = get_env_variable('EMAIL_HOST')
    EMAIL_PORT = int(get_env_variable('EMAIL_PORT'))
    EMAIL_USE_TLS = get_env_variable('EMAIL_USE_TLS', 'True').lower() in ['true', '1', 'yes']
    EMAIL_HOST_USER = get_env_variable('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = get_env_variable('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = get_env_variable('DEFAULT_FROM_EMAIL')
else:
    # Если USE_MAIL=False, используем вывод в консоль
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Русский'),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

BASE_CURRENCY = 'RUB'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

CSRF_TRUSTED_ORIGINS = [
    ALLOWED_FRONT
]

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'project.User'

